{
  "name": "LinkedIn_Post_With_Comments",
  "nodes": [
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "1HU9D5Km0ZEz-zfIQAC35LAXj-Tuk0Qyf",
          "mode": "list",
          "cachedResultName": "Iacovici Alexandru.png",
          "cachedResultUrl": "https://drive.google.com/file/d/1HU9D5Km0ZEz-zfIQAC35LAXj-Tuk0Qyf/view?usp=drivesdk"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        2176,
        128
      ],
      "id": "bdb43011-76b2-467b-bcd6-93f6f8296cc5",
      "name": "Download file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "77pUHEzjPq2WOi7A",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "text",
        "text": "={{ $json.output.hook.title }}\n\n{{ $json.output.hook.body }}",
        "fontSize": 50,
        "positionX": 160,
        "positionY": 500,
        "lineLength": 100,
        "options": {
          "fileName": "hook"
        }
      },
      "type": "n8n-nodes-base.editImage",
      "typeVersion": 1,
      "position": [
        2400,
        128
      ],
      "id": "ca749481-abab-415a-90d0-cf3615d3d569",
      "name": "Edit Image 1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "You are a genius. The most intelligent person in the world and can adapt to any situation.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a genius copywriter and social media strategist. You are the most intelligent person in the world and can adapt to any situation.\n\nYour task is to create content for a social media post based on the following viral example:\n\nNOTION + CHATGPT = PASSIVE INCOME CHEAT CODE\n\nI made an eBook in a weekend.\nNow it sells while I sleep.\n\nHere are 7 ChatGPT prompts that built the whole thing — fast.\n\nSave this before it blows up.\n\n1/ Profitable Niche Discovery\nPrompt:\n\"I want to create a digital eBook in Notion to sell online. What are 10 profitable topics that are trending on platforms like Etsy, Gumroad, and TikTok right now?\"\n\n2/ Title That Sells Itself\nPrompt:\n\"My eBook is about [insert topic]. Generate 10 scroll-stopping, high-converting title ideas that are keyword-rich, emotionally engaging, and built for digital storefronts.\"\n\n3/ Notion Layout Planner\nPrompt:\n\"Give me 3 eBook structure ideas I can build inside Notion. Include layout tips for clarity, visual organization, and bonus sections to make it more valuable.\"\n\n4/ Content Creator Prompt\nPrompt:\n\"Write a value-packed section of my Notion eBook on [insert topic]. Keep it clear, modern, and beginner-friendly — and add a checklist or table if it fits.\"\n\n5/ Product Listing Copywriter\nPrompt:\n\"Write a product description for my Notion eBook on [topic] that highlights the transformation, includes social proof, and has a strong call-to-action.\"\n\n6/ Organic Sales Strategy\nPrompt:\n\"Give me a 7-day promotion plan to launch my Notion eBook on social media without running ads. Include hooks, content ideas, and hashtags.\"\n\n7/ Scale to 6 Figures\nPrompt:\n\"I want to scale my eBook income to $100K/year. Build me a plan that includes stacking niche eBooks, upselling digital bundles, using affiliate traffic, and reinvesting into ads.\"\n\nYour new post must be different but highly engaging and in the same niche. It should consist of a hook and seven distinct, actionable prompts.\n\n**Guidelines for content and tone:**\n* **Topic:** {{ $json.Topic }}\n* **Speech Tone:** {{ $json.Speech_Tone }}\n* **Language:** {{ $json.Language }}\n* **Use Emojis:** {{ $json.Use_emoji }}\n    * Max words per line: {{ $json.Max_words_per_line }}\n    * Min words per line: {{ $json.Min_words_per_line }}\n    * Max number of lines: {{ $json.Max_number_of_lines }}\n    * Min number of lines: {{ $json.Min_number_of_lines }}\n\n**Formatting Rules:**\n* The total width of the text should fit an 800px canvas.\n* **Hook:**\n    * Font Size: 45pt.\n    * Each line of the hook should be between 5 and 7 words long.\n    * Use a newline character (\\n) to break the hook into multiple lines max of 7 words each.\n* **Prompts:**\n    * Font Size: 30pt.\n    * You can build the prompts as detailed as you want.\n    * Do not number the prompts or add any prefixes like \"1. \" or \"Prompt 1:\".\n    * The output should only contain the raw text of the 7 prompts. Do not format prompts with line breaks (\\\\\\\\n) NEVER.\n\n**Final Output Instructions:**\n* Your final output must be a single, valid JSON object.\n* Do not include any text before or after the JSON object.\n* The JSON must adhere strictly to the following schema:\n\n```json\n{\n  \"hook\": {\n    \"title\": \"A powerful, attention-grabbing title for the post's hook, formatted with line breaks (\\\\\\\\n) as needed to fit a social media post.\",\n    \"body\": \"The body text for the hook, formatted with line breaks (\\\\\\\\n) as needed to fit a social media post.\"\n  },\n  \"prompts\": [\n    {\n      \"number\": 1,\n      \"title\": \"The title for the first prompt.\",\n      \"text\": \"The full text of the first prompt.\"\n    },\n    {\n      \"number\": 2,\n      \"title\": \"The title for the second prompt.\",\n      \"text\": \"The full text of the second prompt.\"\n    },\n    {\n      \"number\": 3,\n      \"title\": \"The title for the third prompt.\",\n      \"text\": \"The full text of the third prompt.\"\n    },\n    {\n      \"number\": 4,\n      \"title\": \"The title for the fourth prompt.\",\n      \"text\": \"The full text of the fourth prompt.\"\n    },\n    {\n      \"number\": 5,\n      \"title\": \"The title for the fifth prompt.\",\n      \"text\": \"The full text of the fifth prompt.\"\n    },\n    {\n      \"number\": 6,\n      \"title\": \"The title for the sixth prompt.\",\n      \"text\": \"The full text of the sixth prompt.\"\n    },\n    {\n      \"number\": 7,\n      \"title\": \"The title for the seventh prompt.\",\n      \"text\": \"The full text of the seventh prompt.\"\n    }\n  ]\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1712,
        128
      ],
      "id": "b6e796a0-d49e-4d9c-847c-c45db3201981",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f8ec4e04-2250-49a4-aada-d5191ea4019d",
              "name": "Max_words_per_line",
              "value": "7",
              "type": "string"
            },
            {
              "id": "1bb2edb4-0c31-480b-a6a6-11d3bec80681",
              "name": "Min_words_per_line",
              "value": "5",
              "type": "string"
            },
            {
              "id": "be070e2d-d97d-4abb-9ab8-5c5751931df7",
              "name": "Max_number_of_lines",
              "value": "7",
              "type": "string"
            },
            {
              "id": "ab49767a-3727-4abd-83ad-8220fa57cba2",
              "name": "Min_number_of_lines",
              "value": "5",
              "type": "string"
            },
            {
              "id": "31ac1fbd-37f5-4cd4-b826-cf28812417c4",
              "name": "Speech_Tone",
              "value": "Charismatic with Professionalism and GEN Z type of language",
              "type": "string"
            },
            {
              "id": "917d4267-9deb-4e44-af16-b34861ccf678",
              "name": "Language",
              "value": "English",
              "type": "string"
            },
            {
              "id": "d42def40-5260-4c9c-9c26-5093c66e09f7",
              "name": "Topic",
              "value": "={{ $json['Topic Idea'] }}",
              "type": "string"
            },
            {
              "id": "b682f0a2-b731-4268-95c4-a58cda78aba3",
              "name": "Use_emoji",
              "value": "Absolutely NO.",
              "type": "string"
            },
            {
              "id": "fe3cb9a5-c313-4a4d-adad-1a7cabc4983d",
              "name": "Person_Urn",
              "value": "={{ $('Get User Info').item.json.body.sub }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1456,
        128
      ],
      "id": "fdd48c34-b417-4209-bf99-f092048b992a",
      "name": "Rules"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"hook\": {\n    \"title\": \"NOTION + CHATGPT = PASSIVE INCOME CHEAT CODE\",\n    \"body\": \"I made an eBook in a weekend.\\nNow it sells while I sleep.\\n\\nHere are 7 ChatGPT prompts that built the whole thing — fast.\\n\\nSave this before it blows up.\"\n  },\n  \"prompts\": [\n    {\n      \"number\": 1,\n      \"title\": \"Profitable Niche Discovery\",\n      \"text\": \"I want to create a digital eBook in Notion to sell online. What are 10 profitable topics that are trending on platforms like Etsy, Gumroad, and TikTok right now?\"\n    },\n    {\n      \"number\": 2,\n      \"title\": \"Title That Sells Itself\",\n      \"text\": \"My eBook is about [insert topic]. Generate 10 scroll-stopping, high-converting title ideas that are keyword-rich, emotionally engaging, and built for digital storefronts.\"\n    },\n    {\n      \"number\": 3,\n      \"title\": \"Notion Layout Planner\",\n      \"text\": \"Give me 3 eBook structure ideas I can build inside Notion. Include layout tips for clarity, visual organization, and bonus sections to make it more valuable.\"\n    },\n    {\n      \"number\": 4,\n      \"title\": \"Content Creator Prompt\",\n      \"text\": \"Write a value-packed section of my Notion eBook on [insert topic]. Keep it clear, modern, and beginner-friendly — and add a checklist or table if it fits.\"\n    },\n    {\n      \"number\": 5,\n      \"title\": \"Product Listing Copywriter\",\n      \"text\": \"Write a product description for my Notion eBook on [topic] that highlights the transformation, includes social proof, and has a strong call-to-action.\"\n    },\n    {\n    \"number\": 6,\n    \"title\": \"Organic Sales Strategy\",\n    \"text\": \"Give me a 7-day promotion plan to launch my Notion eBook on social media without running ads. Include hooks, content ideas, and hashtags.\"\n    },\n    {\n      \"number\": 7,\n      \"title\": \"Scale to 6 Figures\",\n      \"text\": \"I want to scale my eBook income to $100K/year. Build me a plan that includes stacking niche eBooks, upselling digital bundles, using affiliate traffic, and reinvesting into ads.\"\n    }\n  ]\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1808,
        352
      ],
      "id": "32534fc8-c120-4295-a53c-21296a523800",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "person": "AZyING_C9S",
        "shareMediaCategory": "IMAGE",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.linkedIn",
      "typeVersion": 1,
      "position": [
        2624,
        128
      ],
      "id": "ca46b701-a1aa-4925-b101-182f840e38b6",
      "name": "Create a post",
      "credentials": {
        "linkedInOAuth2Api": {
          "id": "VMvO4siHzlffzP3W",
          "name": "LinkedIn account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        4320,
        -16
      ],
      "id": "439bd45a-12d2-48be-827c-163ba3d0bdd8",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2848,
        128
      ],
      "id": "aa6f0b11-135d-440a-9104-e1e0b0772410",
      "name": "Wait",
      "webhookId": "1a9c5517-8486-49ea-9369-7f06c4e184e9"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1mpT1qt33xj2HNUvYcJMjpYDYzP8FYzoUcnPsi_Y-pLw",
          "mode": "list",
          "cachedResultName": "LinkedIn 7 Amazing Prompts Ideas",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1mpT1qt33xj2HNUvYcJMjpYDYzP8FYzoUcnPsi_Y-pLw/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Ideas",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1mpT1qt33xj2HNUvYcJMjpYDYzP8FYzoUcnPsi_Y-pLw/edit#gid=0"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Status",
              "lookupValue": "Not Done"
            }
          ]
        },
        "options": {
          "returnFirstMatch": true
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        1232,
        128
      ],
      "id": "19d704c0-ba30-4101-ad55-98a49022e8db",
      "name": "Get Idea",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "Ss6URB41yXjqqwIV",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 7,
              "triggerAtMinute": 28
            },
            {
              "triggerAtHour": 12,
              "triggerAtMinute": 28
            },
            {
              "triggerAtHour": 18,
              "triggerAtMinute": 28
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        784,
        128
      ],
      "id": "4bce109c-c68a-481b-bd9e-c67072a9b220",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "sendTo": "your@email.com",
        "subject": "Your LinkedIn Post has been published",
        "emailType": "text",
        "message": "Hey boss, your LinkedIn Posting was successful and is live. ",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        4096,
        -16
      ],
      "id": "c26a96d6-5869-43a6-9a35-3de8b3e96beb",
      "name": "Send a message",
      "webhookId": "8d92f338-ce93-46b6-ab79-1a8c5aa63551",
      "executeOnce": true,
      "credentials": {
        "gmailOAuth2": {
          "id": "ARfkiQOi1rFTRujt",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "model": "google/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1680,
        352
      ],
      "id": "d2d03c3c-82a5-4b40-ba94-3636bee0f1c9",
      "name": "Flash",
      "credentials": {
        "openRouterApi": {
          "id": "lLONo2Kzh3cTHHkb",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "model": "google/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1888,
        560
      ],
      "id": "da283c4a-0252-40d8-b84a-daca89d93b29",
      "name": "Flash-Structure",
      "credentials": {
        "openRouterApi": {
          "id": "lLONo2Kzh3cTHHkb",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.linkedin.com/v2/userinfo",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "linkedInOAuth2Api",
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1008,
        128
      ],
      "id": "c7ddc3ff-857d-4095-8761-3ab5717632aa",
      "name": "Get User Info",
      "credentials": {
        "linkedInOAuth2Api": {
          "id": "VMvO4siHzlffzP3W",
          "name": "LinkedIn account"
        }
      }
    },
    {
      "parameters": {
        "content": "### **Welcome to Your LinkedIn Carousel Posting Machine!** 🚀\n\n### OPEN THIS NOTE TO FULLY SEE THE CONFIG\n\nThis n8n workflow automates generating viral LinkedIn posts based on \"7 AMAZING prompts\" ideas from a Google Sheet. It uses AI to create hooks and prompts, edits an image, posts to LinkedIn, adds prompts as comments for engagement, updates the sheet, and emails confirmation. Follow these steps to set it up—focus on credentials, prompts, and connections.\n\n-----\n\n### **Step 1: Scheduling and User Authentication** ⏰\n\n  * **Nodes:** Schedule Trigger + HTTP Request2\n  * **Goal:** Triggers the workflow daily at set times and authenticates your LinkedIn user.\n  * **Setup:**\n    1. Add a **Schedule Trigger** node. Set intervals to run at 7:28 AM, 12:28 PM, and 6:28 PM (use \"Interval\" mode with \"Trigger at Hour\" and \"Trigger at Minute\").\n    2. Connect to **HTTP Request2** node: Set Method to GET, URL to `https://api.linkedin.com/v2/userinfo`, Authentication to LinkedIn OAuth2 API. Create LinkedIn credentials via OAuth2 (get app from LinkedIn Developers: [https://www.linkedin.com/developers](https://www.linkedin.com/developers)). Enable \"Full Response\" in options.\n    3. Test: Run manually; it should fetch your LinkedIn sub (user ID).\n\n-----\n\n### **Step 2: Fetching Post Ideas from Google Sheets** 📊\n\n  * **Node:** Get Idea (Google Sheets)\n  * **Goal:** Pulls the next \"Not Done\" idea from your sheet to generate content.\n  * **Setup:**\n    1. Create a Google Sheet named \"LinkedIn 7 Amazing Prompts Ideas\" with columns: `Topic Idea`, `Status`, and auto-add `row_number`.\n    2. In the node: Select Operation \"Lookup\", Document ID via list (pick your sheet), Sheet Name \"Ideas\" (gid=0). Add filter: Lookup Column `Status` = `Not Done`. Enable \"Return First Match\".\n    3. Credentials: Use Google Sheets OAuth2 (authorize via Google Cloud Console: [https://console.cloud.google.com/apis](https://console.cloud.google.com/apis)).\n    4. Connect from HTTP Request2. Test: Add a row with \"Topic Idea\" like \"7 AMAZING prompts for ChatGPT in Marketing\" and Status \"Not Done\"; it should return one item.\n\n-----\n\n### **Step 3: Setting Rules and Parameters** ⚙️\n\n  * **Node:** Rules (Set)\n  * **Goal:** Defines variables like tone, language, and topic for AI generation.\n  * **Setup:**\n    1. Use \"Set\" node with \"Assignments\" mode. Add string assignments:\n       - `Max_words_per_line`: \"7\"\n       - `Min_words_per_line`: \"5\"\n       - `Max_number_of_lines`: \"7\"\n       - `Min_number_of_lines`: \"5\"\n       - `Speech_Tone`: \"Charismatic with Professionalism and GEN Z type of language\"\n       - `Language`: \"English\"\n       - `Topic`: `={{ $json['Topic Idea'] }}` (from Get Idea)\n       - `Use_emoji`: \"Absolutely NO.\"\n       - `Person_Urn`: `={{ $('HTTP Request2').item.json.body.sub }}` (your LinkedIn ID)\n    2. Connect from Get Idea. Test: Outputs should include the topic and fixed params.\n\n-----\n\n### **Step 4: AI Content Generation** 🤖\n\n  * **Nodes:** AI Agent + Flash + Flash-Structure + Structured Output Parser\n  * **Goal:** AI generates a hook and 7 prompts in JSON format based on the topic.\n  * **Setup:**\n    1. **AI Agent** (Langchain Agent v2.2): Set Prompt Type \"Define\", Text to system message (copy the long prompt from JSON, including guidelines for hook, prompts, formatting, and JSON schema). Enable \"Has Output Parser\". Connect to \"Flash\" for language model.\n    2. **Flash** and **Flash-Structure** (LM Chat OpenRouter): Both use Model \"google/gemini-2.5-flash\". Credentials: OpenRouter API key (get from [https://openrouter.ai](https://openrouter.ai)).\n    3. **Structured Output Parser** (Langchain Output Parser v1.3): Paste JSON Schema Example from the JSON. Enable \"Auto Fix\".\n    4. Connections: Rules → AI Agent → Download file (main); Structured Output Parser → AI Agent (ai_outputParser); Flash → AI Agent (ai_languageModel); Flash-Structure → Structured Output Parser (ai_languageModel).\n    5. Test: Run; output should be JSON with \"hook\" (title/body) and \"prompts\" array.\n\n-----\n\n### **Step 5: Image Download and Editing** 🖼️\n\n  * **Nodes:** Download file (Google Drive) + Edit Image 1\n  * **Goal:** Downloads a base image and overlays the AI-generated hook text.\n  * **Setup:**\n    1. **Download file**: Operation \"Download\", File ID \"1HU9D5Km0ZEz-zfIQAC35LAXj-Tuk0Qyf\" (your image, e.g., \"Iacovici Alexandru.png\"). Credentials: Google Drive OAuth2 (same as Sheets).\n    2. **Edit Image 1**: Operation \"Text\", Text `={{ $json.output.hook.title }}\\n\\n{{ $json.output.hook.body }}`, Font Size 50, Position X 160/Y 500, Line Length 100, File Name \"hook\".\n    3. Connect AI Agent → Download file → Edit Image 1. Test: Outputs edited image binary data.\n\n-----\n\n### **Step 6: Posting to LinkedIn** 🔗\n\n  * **Node:** Create a post (LinkedIn)\n  * **Goal:** Publishes the post with the edited image.\n  * **Setup:**\n    1. Set Person to your URN (e.g., \"AZyING_C9S\" or from Rules), Share Media Category \"IMAGE\".\n    2. Credentials: LinkedIn OAuth2 (same as HTTP Request2).\n    3. Connect from Edit Image 1. Test: Posts an image update; note the \"urn\" (post ID) in output.\n\n-----\n\n### **Step 7: Waiting and Extracting Prompts** ⏱️\n\n  * **Nodes:** Wait + Information Extractor1 + Flash-Extract\n  * **Goal:** Pauses for post to go live, then extracts prompts for commenting.\n  * **Setup:**\n    1. **Wait**: Default settings (resumes on webhook, but manual test skips).\n    2. **Information Extractor1** (Langchain Info Extractor v1.2): Text `={{ $('AI Agent').item.json.output.prompts }} Extract each prompt by itself like \"1. Platform Analysis > Identify top marketing channels for my business. What platforms vibe with my target audience and market trends?\" and so on. Do not include special characters like '*' , '\\\"' etc, make it exactly structured like my example.`. Add 7 attributes like `={{ $('AI Agent').item.json.output.prompts[0].title }} = {{ $('AI Agent').item.json.output.prompts[0].text }}` for each prompt.\n    3. **Flash-Extract**: Model \"google/gemini-2.5-flash\", OpenRouter credentials.\n    4. Connections: Create a post → Wait → Information Extractor1; Flash-Extract → Information Extractor1 (ai_languageModel).\n    5. Test: Outputs extracted prompts as attributes.\n\n-----\n\n### **Step 8: Commenting the Prompts (Viral Engagement Loop)** 🔄\n\n  * **Nodes:** Split Out + Loop Over Items (Split in Batches) + Comment Prompt 1\n  * **Goal:** Splits and posts each of the 7 prompts as comments on the new post.\n  * **Setup:**\n    1. **Split Out**: Field to Split Out \"output\".\n    2. **Loop Over Items**: Default batch size (1 for sequential commenting).\n    3. **Comment Prompt 1** (HTTP Request): Method POST, URL `=https://api.linkedin.com/v2/socialActions/{{ $('Create a post').item.json.urn }}/comments`, Body `={\"actor\":\"urn:li:person:{{ $('HTTP Request2').item.json.body.sub }}\",\"message\":{\"text\":\"{{ $json.output }}\"}}`. LinkedIn credentials.\n    4. Connections: Information Extractor1 → Split Out → Loop Over Items → Comment Prompt 1 → Loop Over Items (loop back); Loop Over Items → Idea Done (exit loop).\n    5. Test: Comments appear under the post; add delays if needed to avoid rate limits.\n\n-----\n\n### **Step 9: Updating Sheet and Notification** ✅\n\n  * **Nodes:** Idea Done (Google Sheets) + Send a message (Gmail)\n  * **Goal:** Marks idea as \"Done\" and emails success notification.\n  * **Setup:**\n    1. **Idea Done**: Operation \"Update\", Document/Sheet same as Get Idea. Columns: Mapping Mode \"Define Below\", Value `{ \"row_number\": \"={{ $('Get Idea').item.json.row_number }}\", \"Status\": \"Done\" }`, Matching Columns \"row_number\". Execute Once.\n    2. **Send a message**: To \"iacovici95@gmail.com\", Subject \"Your LinkedIn Post has been published\", Message \"Hey boss, your LinkedIn Post was successful and is live.\". Credentials: Gmail OAuth2 (authorize via Google).\n    3. Connections: Loop Over Items → Idea Done → Send a message → No Operation (end).\n    4. Test: Sheet updates; email sends.\n\n-----\n\n### **Step 10: Optional Image Upload Flow (Unused in Main)** 📸\n\n  * **Nodes:** HTTP Request8 + HTTP Request9 + HTTP Request7 (for direct LinkedIn image uploads)\n  * **Goal:** Registers and uploads images if not using Google Drive/Edit Image.\n  * **Setup:** If needed, adapt: POST to register upload, PUT binary data, then comment with image. Currently separate; connect if replacing image nodes. LinkedIn credentials required.\n\n-----\n\n### **Troubleshooting** 💡\n\n  * **API Errors:** Verify LinkedIn scopes (e.g., w_member_social), Google permissions (Sheets/Drive edit), OpenRouter credits. Test OAuth refreshes.\n  * **JSON Formatting:** If AI output isn't valid JSON, tweak system message in AI Agent. Use \"Auto Fix\" in parser.\n  * **No Ideas Fetched:** Ensure sheet has \"Not Done\" rows; check filters.\n  * **Comments Fail:** Use post \"urn\" correctly; add Wait (5-10s) per loop to avoid spam flags.\n  * **Disabled Nodes:** Ignore \"When clicking ‘Execute workflow’\" (manual trigger) and Facebook Graph API (disabled).\n\nActivate the workflow and watch your LinkedIn go viral!",
        "height": 336,
        "width": 768
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        784,
        320
      ],
      "typeVersion": 1,
      "id": "087b738e-973b-433b-9f1d-792a22d98889",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.linkedin.com/v2/socialActions/{{ $('Create a post').item.json.urn }}/comments",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "linkedInOAuth2Api",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n   \"actor\":\"urn:li:person:{{ $('HTTP Request2').item.json.body.sub }}\",\n   \"message\":{\n      \"text\":\"{{ $json.name }}\"\n }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3872,
        176
      ],
      "id": "469596c7-2827-44b6-9f31-a993395aff0c",
      "name": "Comment Prompt 1",
      "credentials": {
        "linkedInOAuth2Api": {
          "id": "VMvO4siHzlffzP3W",
          "name": "LinkedIn account"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "output.prompts",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3424,
        128
      ],
      "id": "cf059f85-0636-4f05-8bfe-85f42c535cac",
      "name": "Split Out"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        3648,
        128
      ],
      "id": "eb9a954c-8f04-46f7-ba95-26377de16ef6",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1mpT1qt33xj2HNUvYcJMjpYDYzP8FYzoUcnPsi_Y-pLw",
          "mode": "list",
          "cachedResultName": "LinkedIn 7 Amazing Prompts Ideas",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1mpT1qt33xj2HNUvYcJMjpYDYzP8FYzoUcnPsi_Y-pLw/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Ideas",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1mpT1qt33xj2HNUvYcJMjpYDYzP8FYzoUcnPsi_Y-pLw/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "row_number": "={{ $('Get Idea').item.json.row_number }}",
            "Status": "Done"
          },
          "matchingColumns": [
            "row_number"
          ],
          "schema": [
            {
              "id": "Topic Idea",
              "displayName": "Topic Idea",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        3872,
        -16
      ],
      "id": "596faf4f-3c39-4d10-911a-7a09610a398e",
      "name": "Idea Done",
      "executeOnce": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "Ss6URB41yXjqqwIV",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "text": "={{ $('AI Agent').item.json.output.prompts }} \n\nExtract each prompt individually in the format: \n'1. Title > Text', '2. Title > Text', and so on, based on the order of prompts in the input. \n\nEnsure the output matches this structure exactly: 'Number. Title > Text'. \n\nRemove any special characters like '*', '\\', '\"', or others from the title and text, and ensure no extra spaces or formatting issues. \n\nFor example: '1. Platform Analysis > Identify top marketing channels for my business. What platforms vibe with my target audience and market trends?'\n\nJSON example: \n\n{\n    \"prompts\": [\n      {\n        \"name\": \"1. Platform Analysis > Identify top marketing channels for my business. What platforms vibe with my target audience and market trends?\"\n      },\n      {\n        \"name\": \"2. Content Strategy > Suggest a content plan for social media growth.\"\n      },\n      {\n        \"name\": \"3. Budget Planning > Estimate costs for a digital marketing campaign.\"\n      },\n      {\n        \"name\": \"4. Audience Targeting > Define my ideal customer profile based on demographics and behavior.\"\n      },\n      {\n        \"name\": \"5. Social Media Ads > Design a strategy for effective ad campaigns on Instagram and Facebook.\"\n      },\n      {\n        \"name\": \"6. SEO Optimization > Recommend keywords to improve my website's search engine ranking.\"\n      },\n      {\n        \"name\": \"7. Email Marketing > Create a plan for a successful email drip campaign.\"\n      }\n    ]\n}",
        "schemaType": "fromJson",
        "jsonSchemaExample": "{\n    \"prompts\": [\n      {\n        \"name\": \"1. Platform Analysis > Identify top marketing channels for my business. What platforms vibe with my target audience and market trends?\"\n      },\n      {\n        \"name\": \"2. Content Strategy > Suggest a content plan for social media growth.\"\n      },\n      {\n        \"name\": \"3. Budget Planning > Estimate costs for a digital marketing campaign.\"\n      },\n      {\n        \"name\": \"4. Audience Targeting > Define my ideal customer profile based on demographics and behavior.\"\n      },\n      {\n        \"name\": \"5. Social Media Ads > Design a strategy for effective ad campaigns on Instagram and Facebook.\"\n      },\n      {\n        \"name\": \"6. SEO Optimization > Recommend keywords to improve my website's search engine ranking.\"\n      },\n      {\n        \"name\": \"7. Email Marketing > Create a plan for a successful email drip campaign.\"\n      }\n    ]\n}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1.2,
      "position": [
        3088,
        128
      ],
      "id": "52cb175a-24a0-4bf8-afa6-81847590c44b",
      "name": "Information Extractor"
    },
    {
      "parameters": {
        "model": "google/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        3088,
        304
      ],
      "id": "c4d19281-b5e6-47d8-9de5-143cfce63d24",
      "name": "Flash-Extract1",
      "credentials": {
        "openRouterApi": {
          "id": "lLONo2Kzh3cTHHkb",
          "name": "OpenRouter account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Download file": {
      "main": [
        [
          {
            "node": "Edit Image 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Download file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Image 1": {
      "main": [
        [
          {
            "node": "Create a post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rules": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Create a post": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Information Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Idea": {
      "main": [
        [
          {
            "node": "Rules",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get User Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a message": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Flash": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Flash-Structure": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get User Info": {
      "main": [
        [
          {
            "node": "Get Idea",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Comment Prompt 1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Idea Done",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Comment Prompt 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Idea Done": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Flash-Extract1": {
      "ai_languageModel": [
        [
          {
            "node": "Information Extractor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Information Extractor": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9e3d0bdf-b1c4-4ad0-8ea1-416549e9370c",
  "meta": {
    "instanceId": "dbaf995a552ad456c5cce79204c975c0e35798cd443fe4b878db57c81c75aac9"
  },
  "id": "Tf5zEYQb3SWdKwGi",
  "tags": []
}